---
/**
 * TokenStats - Reusable token statistics formatter component
 * @props {tokenUsage: Object} - Token usage data with translation/tldr/total breakdown
 * @behavior Displays formatted token counts, cost, and CO₂ impact
 * @dependencies Astro Icon component, Tailwind CSS
 * @usedBy ContentMetadata.astro, PostFooter.astro
 */

import { Icon } from 'astro-icon/components';

export interface Props {
  tokenUsage?: {
    translation?: {
      tokens: number;
      cost: number;
      co2: number;
    };
    tldr?: {
      tokens: number;
      cost: number;
      co2: number;
    };
    total?: {
      tokens: number;
      cost: number;
      co2: number;
    };
  };
  showType?: 'translation' | 'tldr' | 'total' | 'all';
  compact?: boolean;
  className?: string;
}

const { tokenUsage, showType = 'total', compact = false, className = '' } = Astro.props;

if (!tokenUsage) {
  return null;
}

// Format numbers for display
const formatTokens = (tokens: number) => {
  if (tokens >= 1000) {
    return `${(tokens / 1000).toFixed(1)}k`;
  }
  return tokens.toString();
};

const formatCost = (cost: number) => {
  if (cost < 0.001) {
    return `$${(cost * 1000).toFixed(2)}‰`; // Display in per-mille for very small amounts
  }
  return `$${cost.toFixed(4)}`;
};

const formatCO2 = (co2: number) => {
  if (co2 < 1) {
    return `${(co2 * 1000).toFixed(0)}mg`;
  }
  return `${co2.toFixed(2)}g`;
};

// Determine which data to show
let displayData: { tokens: number; cost: number; co2: number } | null = null;
let displayLabel = '';

switch (showType) {
  case 'translation':
    displayData = tokenUsage.translation || null;
    displayLabel = 'Translation';
    break;
  case 'tldr':
    displayData = tokenUsage.tldr || null;
    displayLabel = 'TLDR';
    break;
  case 'total':
    displayData = tokenUsage.total || null;
    displayLabel = 'Total';
    break;
  case 'all':
    // We'll handle this differently below
    break;
}

if (!displayData && showType !== 'all') {
  return null;
}
---

{
  showType === 'all' ? (
    <div class={`token-stats-all space-y-2 ${className}`}>
      {tokenUsage.translation && (
        <div class="flex items-center gap-2 text-xs text-slate-600 dark:text-slate-400">
          <Icon name="tabler:language" class="w-3 h-3" />
          <span class="font-medium">Translation:</span>
          <span>{formatTokens(tokenUsage.translation.tokens)} tokens</span>
          <span class="text-slate-400">•</span>
          <span>{formatCost(tokenUsage.translation.cost)}</span>
          <span class="text-slate-400">•</span>
          <span>{formatCO2(tokenUsage.translation.co2)} CO₂</span>
        </div>
      )}

      {tokenUsage.tldr && (
        <div class="flex items-center gap-2 text-xs text-slate-600 dark:text-slate-400">
          <Icon name="tabler:sparkles" class="w-3 h-3" />
          <span class="font-medium">TLDR:</span>
          <span>{formatTokens(tokenUsage.tldr.tokens)} tokens</span>
          <span class="text-slate-400">•</span>
          <span>{formatCost(tokenUsage.tldr.cost)}</span>
          <span class="text-slate-400">•</span>
          <span>{formatCO2(tokenUsage.tldr.co2)} CO₂</span>
        </div>
      )}

      {tokenUsage.total && (
        <div class="flex items-center gap-2 text-xs text-slate-600 dark:text-slate-400 font-medium pt-1 border-t border-slate-200 dark:border-slate-700">
          <Icon name="tabler:sum" class="w-3 h-3" />
          <span>Total:</span>
          <span>{formatTokens(tokenUsage.total.tokens)} tokens</span>
          <span class="text-slate-400">•</span>
          <span>{formatCost(tokenUsage.total.cost)}</span>
          <span class="text-slate-400">•</span>
          <span>{formatCO2(tokenUsage.total.co2)} CO₂</span>
        </div>
      )}
    </div>
  ) : (
    displayData && (
      <div
        class={`token-stats-single ${compact ? 'inline-flex' : 'flex'} items-center gap-2 text-xs text-slate-600 dark:text-slate-400 ${className}`}
      >
        <Icon name="tabler:cpu" class="w-3 h-3 flex-shrink-0" />
        {!compact && <span class="font-medium">{displayLabel}:</span>}
        <span class="font-mono">{formatTokens(displayData.tokens)} tokens</span>
        {!compact && (
          <>
            <span class="text-slate-400">•</span>
            <span class="font-mono">{formatCost(displayData.cost)}</span>
            <span class="text-slate-400">•</span>
            <span class="font-mono">{formatCO2(displayData.co2)} CO₂</span>
          </>
        )}
      </div>
    )
  )
}

<style>
  .token-stats-single,
  .token-stats-all {
    font-variant-numeric: tabular-nums;
  }
</style>

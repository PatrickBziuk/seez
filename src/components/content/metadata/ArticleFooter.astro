---
/**
 * ArticleFooter - Comprehensive article statistics and metadata display
 * @props {content: string, sources?: array, publishDate?: Date, modifiedDate?: Date, canonicalId?: string}
 * @behavior Shows word count, reading stats, publication info, and sources at article end
 * @dependencies reading-stats utility, i18n, astro-icon
 * @usedBy MarkdownLayout.astro, article pages
 */
import { Icon } from 'astro-icon/components';
import Badge from '../../ui/display/Badge.astro';
import { getTranslations, detectLanguage } from '~/utils/i18n';
import { getReadingStats, getReadingDifficulty } from '~/utils/reading-stats';

const { content = '', sources = [], publishDate, modifiedDate, canonicalId, className = '' } = Astro.props;

const currentLanguage = detectLanguage(Astro.url.pathname);
const translations = await getTranslations(currentLanguage);

// Calculate comprehensive reading statistics
const stats = content ? getReadingStats(content) : null;
const difficulty = content ? getReadingDifficulty(content) : null;

// Convert date strings to Date objects if needed
const publishDateObj = publishDate ? (publishDate instanceof Date ? publishDate : new Date(publishDate)) : null;
const modifiedDateObj = modifiedDate ? (modifiedDate instanceof Date ? modifiedDate : new Date(modifiedDate)) : null;

// Format dates
const formattedPublishDate = publishDateObj
  ? publishDateObj.toLocaleDateString(currentLanguage || 'en', {
      year: 'numeric',
      month: 'long',
      day: 'numeric',
    })
  : '';

const formattedModifiedDate = modifiedDateObj
  ? modifiedDateObj.toLocaleDateString(currentLanguage || 'en', {
      year: 'numeric',
      month: 'long',
      day: 'numeric',
    })
  : '';

const showModifiedDate = modifiedDateObj && publishDateObj && modifiedDateObj.getTime() !== publishDateObj.getTime();

// Source type icons
const sourceIcons: Record<string, string> = {
  article: 'tabler:article',
  book: 'tabler:book',
  video: 'tabler:video',
  documentation: 'tabler:file-text',
  research: 'tabler:microscope',
  website: 'tabler:world-www',
  other: 'tabler:link',
};
---

{
  (stats || sources?.length > 0 || publishDateObj || canonicalId) && (
    <footer class={`mt-12 pt-8 border-t border-slate-200/60 dark:border-slate-700/60 ${className}`}>
      {/* Article Statistics */}
      {stats && (
        <div class="mb-8">
          <div class="flex items-center gap-2 mb-4">
            <Icon name="tabler:chart-bar" class="w-4 h-4 text-slate-500 dark:text-slate-400" />
            <h3 class="text-sm font-medium text-slate-600 dark:text-slate-300 uppercase tracking-wider">
              {translations?.metadata?.statistics || 'Article Statistics'}
            </h3>
          </div>

          <div class="grid grid-cols-2 md:grid-cols-4 gap-4">
            <div class="text-center p-3 bg-slate-50/70 dark:bg-slate-800/40 rounded-lg">
              <div class="text-lg font-bold text-slate-700 dark:text-slate-200">{stats.wordCount.toLocaleString()}</div>
              <div class="text-xs text-slate-500 dark:text-slate-400 uppercase tracking-wider">
                {translations?.metadata?.wordCount || 'Words'}
              </div>
            </div>

            <div class="text-center p-3 bg-slate-50/70 dark:bg-slate-800/40 rounded-lg">
              <div class="text-lg font-bold text-slate-700 dark:text-slate-200">{stats.readingTime.formatted}</div>
              <div class="text-xs text-slate-500 dark:text-slate-400 uppercase tracking-wider">
                {translations?.metadata?.readingTime || 'Reading Time'}
              </div>
            </div>

            <div class="text-center p-3 bg-slate-50/70 dark:bg-slate-800/40 rounded-lg">
              <div class="text-lg font-bold text-slate-700 dark:text-slate-200">{stats.paragraphCount}</div>
              <div class="text-xs text-slate-500 dark:text-slate-400 uppercase tracking-wider">
                {translations?.metadata?.paragraphs || 'Paragraphs'}
              </div>
            </div>

            <div class="text-center p-3 bg-slate-50/70 dark:bg-slate-800/40 rounded-lg">
              <div class="flex items-center justify-center gap-1">
                {difficulty && (
                  <Badge
                    variant="tag"
                    text={difficulty.level.charAt(0).toUpperCase() + difficulty.level.slice(1)}
                    size="sm"
                  />
                )}
              </div>
              <div class="text-xs text-slate-500 dark:text-slate-400 uppercase tracking-wider mt-1">
                {translations?.metadata?.difficulty || 'Difficulty'}
              </div>
            </div>
          </div>

          {/* Reading Speed Variants */}
          <div class="mt-4 p-3 bg-slate-50/50 dark:bg-slate-800/20 rounded-lg">
            <div class="text-xs text-slate-500 dark:text-slate-400 mb-2">
              {translations?.metadata?.readingTimeVariants || 'Reading time estimates'}:
            </div>
            <div class="flex gap-4 text-xs">
              <span class="text-slate-600 dark:text-slate-300">
                {translations?.metadata?.slowReader || 'Slow'}: {stats.readingTimes.slow.formatted}
              </span>
              <span class="text-slate-600 dark:text-slate-300">
                {translations?.metadata?.averageReader || 'Average'}: {stats.readingTimes.average.formatted}
              </span>
              <span class="text-slate-600 dark:text-slate-300">
                {translations?.metadata?.fastReader || 'Fast'}: {stats.readingTimes.fast.formatted}
              </span>
            </div>
          </div>
        </div>
      )}

      {/* Sources Section */}
      {sources && sources.length > 0 && (
        <div class="mb-8">
          <div class="flex items-center gap-2 mb-4">
            <Icon name="tabler:books" class="w-4 h-4 text-slate-500 dark:text-slate-400" />
            <h3 class="text-sm font-medium text-slate-600 dark:text-slate-300 uppercase tracking-wider">
              {translations?.metadata?.sources || 'Sources & References'}
            </h3>
          </div>

          <div class="space-y-3">
            {sources.map(
              (source: {
                title: string;
                url?: string;
                author?: string;
                date?: string;
                type: string;
                description?: string;
              }) => (
                <div class="flex items-start gap-3 p-3 bg-slate-50/70 dark:bg-slate-800/40 rounded-lg hover:bg-slate-100/70 dark:hover:bg-slate-800/60 transition-colors">
                  <Icon
                    name={sourceIcons[source.type] || sourceIcons.other}
                    class="w-4 h-4 text-slate-500 dark:text-slate-400 mt-0.5 flex-shrink-0"
                  />
                  <div class="flex-1 min-w-0">
                    <div class="flex items-start justify-between gap-2">
                      {source.url ? (
                        <a
                          href={source.url}
                          target="_blank"
                          rel="noopener noreferrer"
                          class="font-medium text-slate-700 dark:text-slate-200 hover:text-blue-600 dark:hover:text-blue-400 transition-colors break-words"
                        >
                          {source.title}
                          <Icon name="tabler:external-link" class="w-3 h-3 inline ml-1" />
                        </a>
                      ) : (
                        <span class="font-medium text-slate-700 dark:text-slate-200 break-words">{source.title}</span>
                      )}
                      <Badge variant="tag" text={source.type} size="sm" />
                    </div>
                    {source.author && (
                      <div class="text-sm text-slate-600 dark:text-slate-300 mt-1">
                        {translations?.metadata?.by || 'by'} {source.author}
                        {source.date && <span class="text-slate-500 dark:text-slate-400 ml-2">â€¢ {source.date}</span>}
                      </div>
                    )}
                    {source.description && (
                      <div class="text-sm text-slate-500 dark:text-slate-400 mt-1">{source.description}</div>
                    )}
                  </div>
                </div>
              )
            )}
          </div>
        </div>
      )}

      {/* Publication Information */}
      {(publishDateObj || canonicalId) && (
        <div class="text-xs text-slate-500 dark:text-slate-400 pt-4 border-t border-slate-200/40 dark:border-slate-700/40">
          <div class="flex flex-wrap items-center gap-4">
            {publishDateObj && (
              <span class="flex items-center gap-1.5">
                <Icon name="tabler:calendar-plus" class="w-3 h-3" />
                {translations?.metadata?.published || 'Published'}: {formattedPublishDate}
              </span>
            )}
            {showModifiedDate && (
              <span class="flex items-center gap-1.5">
                <Icon name="tabler:calendar-event" class="w-3 h-3" />
                {translations?.metadata?.updated || 'Updated'}: {formattedModifiedDate}
              </span>
            )}
            {canonicalId && (
              <span class="flex items-center gap-1.5">
                <Icon name="tabler:fingerprint" class="w-3 h-3" />
                ID: <code class="text-xs bg-slate-100 dark:bg-slate-800 px-1 rounded">{canonicalId}</code>
              </span>
            )}
          </div>
        </div>
      )}
    </footer>
  )
}

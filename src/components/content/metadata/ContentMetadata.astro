---
/**
 * ContentMetadata - Displays grouped metadata badges and details for content entries
 * @props {metadata: Object} - Content metadata (title, language, tags, status, etc.)
 * @behavior Renders grouped badges for Author, Translation, Published, and Tags; supports i18n; tags are clickable
 * @dependencies Tailwind CSS, i18n utilities
 * @usedBy MarkdownLayout.astro, [slug].astro, books, projects, lab, life collections
 */
import Badge from '../../ui/display/Badge.astro';
import { getTranslations, detectLanguage } from '~/utils/i18n';

const { language, timestamp, status, tags } = Astro.props;
const currentLanguage = detectLanguage(Astro.url.pathname);
const translations = await getTranslations(currentLanguage);

const statusLabels: Record<'Human' | 'AI' | 'AI+Human', string> = {
  Human: translations?.badges?.human || 'Human',
  AI: translations?.badges?.ai || 'AI',
  'AI+Human': translations?.badges?.aiHuman || 'AI+Human',
};
const statusIcons: Record<'Human' | 'AI' | 'AI+Human', string> = {
  Human: '👤',
  AI: '🤖',
  'AI+Human': '🤝',
};
function getStatusVariant(status: 'Human' | 'AI' | 'AI+Human') {
  if (status === 'AI') return 'ai';
  if (status === 'Human') return 'human';
  return 'ai-human';
}
---
{(language || timestamp || status || tags?.length) && (
  <div class="border-b border-gray-200 dark:border-gray-700 pb-6 mb-8 flex flex-col gap-4">
    <div class="flex flex-col gap-2">
      <div class="flex items-center gap-2">
        <span class="font-semibold text-xs">{translations?.metadata?.author || 'Author'}:</span>
        {status?.authoring && statusIcons[status.authoring as 'Human' | 'AI' | 'AI+Human'] && (
          <Badge variant={getStatusVariant(status.authoring as 'Human' | 'AI' | 'AI+Human')} text={statusLabels[status.authoring as 'Human' | 'AI' | 'AI+Human']} icon={statusIcons[status.authoring as 'Human' | 'AI' | 'AI+Human']} size="sm" />
        )}
      </div>
      {status?.translation && (
        <div class="flex items-center gap-2">
          <span class="font-semibold text-xs">{translations?.metadata?.translation || 'Translation'}:</span>
          <Badge variant={getStatusVariant(status.translation as 'Human' | 'AI' | 'AI+Human')} text={statusLabels[status.translation as 'Human' | 'AI' | 'AI+Human']} icon={statusIcons[status.translation as 'Human' | 'AI' | 'AI+Human']} size="sm" />
        </div>
      )}
      {timestamp && (
        <div class="flex items-center gap-2">
          <span class="font-semibold text-xs">{translations?.metadata?.published || 'Published'}:</span>
          <Badge variant="timestamp" text={new Date(timestamp).toLocaleDateString()} icon="📅" size="sm" />
        </div>
      )}
      {tags?.length > 0 && (
        <div class="flex items-center gap-2 flex-wrap">
          <span class="font-semibold text-xs">{translations?.metadata?.tags || 'Tags'}:</span>
          {tags.map((tag: string) => (
            <a href={`/${currentLanguage}/tags/${encodeURIComponent(tag)}`} class="focus:outline-none">
              <Badge variant="tag" text={translations?.tags?.[tag] || tag} />
            </a>
          ))}
        </div>
      )}
    </div>
  </div>
)}

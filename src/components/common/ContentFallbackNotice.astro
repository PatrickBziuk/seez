---
/**
 * ContentFallbackNotice Component
 * Displays when content is shown in non-preferred language
 */
import { useTranslation } from 'astro-i18next';
import { LANGUAGE_INFO } from '~/utils/i18n';
import type { SupportedLanguage } from '~/utils/i18n';

export interface Props {
  originalLanguage: SupportedLanguage;
  currentLanguage: SupportedLanguage;
  dismissible?: boolean;
  fallbackUrl?: string;
}

const { originalLanguage, currentLanguage, dismissible = true, fallbackUrl } = Astro.props;
const { t } = useTranslation();

// Only show if languages are different
const shouldShow = originalLanguage !== currentLanguage;
---

{shouldShow && (
  <div 
    class="bg-yellow-50 dark:bg-yellow-900 border border-yellow-200 dark:border-yellow-700 rounded-md p-4 mb-6"
    role="alert"
    data-fallback-notice
  >
    <div class="flex items-start">
      <div class="flex-shrink-0">
        <svg class="h-5 w-5 text-yellow-400" viewBox="0 0 20 20" fill="currentColor">
          <path fill-rule="evenodd" d="M8.485 2.495c.673-1.167 2.357-1.167 3.03 0l6.28 10.875c.673 1.167-.17 2.625-1.516 2.625H3.72c-1.347 0-2.189-1.458-1.515-2.625L8.485 2.495zM10 5a.75.75 0 01.75.75v3.5a.75.75 0 01-1.5 0v-3.5A.75.75 0 0110 5zm0 9a1 1 0 100-2 1 1 0 000 2z" clip-rule="evenodd" />
        </svg>
      </div>
      <div class="ml-3 flex-1">
        <h3 class="text-sm font-medium text-yellow-800 dark:text-yellow-200">
          {t('content.language_fallback_title')}
        </h3>
        <div class="mt-2 text-sm text-yellow-700 dark:text-yellow-300">
          <p>
            {t('content.not_available_in')} 
            <span class="font-medium">
              {LANGUAGE_INFO[originalLanguage]?.flag} {LANGUAGE_INFO[originalLanguage]?.label}
            </span>.
            {t('content.showing_in')} 
            <span class="font-medium">
              {LANGUAGE_INFO[currentLanguage]?.flag} {LANGUAGE_INFO[currentLanguage]?.label}
            </span>.
          </p>
          {fallbackUrl && (
            <div class="mt-2">
              <a 
                href={fallbackUrl} 
                class="font-medium text-yellow-800 dark:text-yellow-200 hover:text-yellow-600 dark:hover:text-yellow-100 underline"
              >
                {t('content.return_to_preferred')}
              </a>
            </div>
          )}
        </div>
      </div>
      {dismissible && (
        <div class="ml-auto pl-3">
          <div class="-mx-1.5 -my-1.5">
            <button 
              type="button" 
              class="inline-flex bg-yellow-50 dark:bg-yellow-900 rounded-md p-1.5 text-yellow-500 hover:bg-yellow-100 dark:hover:bg-yellow-800 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-yellow-50 focus:ring-yellow-600"
              data-dismiss-fallback-notice
              aria-label={t('content.dismiss')}
            >
              <svg class="h-3 w-3" viewBox="0 0 20 20" fill="currentColor">
                <path d="M6.28 5.22a.75.75 0 00-1.06 1.06L8.94 10l-3.72 3.72a.75.75 0 101.06 1.06L10 11.06l3.72 3.72a.75.75 0 101.06-1.06L11.06 10l3.72-3.72a.75.75 0 00-1.06-1.06L10 8.94 6.28 5.22z" />
              </svg>
            </button>
          </div>
        </div>
      )}
    </div>
  </div>
)}

<script>
  // Handle dismissible notice with localStorage persistence
  document.addEventListener('DOMContentLoaded', () => {
    const notice = document.querySelector('[data-fallback-notice]') as HTMLElement;
    const dismissButton = document.querySelector('[data-dismiss-fallback-notice]');
    
    if (!notice || !dismissButton) return;
    
    // Check if notice was previously dismissed
    const noticeId = `fallback-dismissed-${window.location.pathname}`;
    if (localStorage.getItem(noticeId)) {
      notice.style.display = 'none';
      return;
    }
    
    // Handle dismiss
    dismissButton.addEventListener('click', () => {
      notice.style.display = 'none';
      localStorage.setItem(noticeId, 'true');
    });
  });
</script>
